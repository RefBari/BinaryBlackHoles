using Plots
using DifferentialEquations
using LaTeXStrings
include("/Users/rbari/Downloads/common_denominator-2020_scimlforbbhs-e19e6808aad2/paper/zenodo/GWaveInversion/WaveformMan")

function create_Schwarzschild_trainingData(initial_conditions)
    semirectum = initial_conditions[1] # Semi-latus rectum
    ecc = initial_conditions[2] # Eccentricity

    function pe_2_EL(semilatusRectum, eccentricity)
        p = semilatusRectum
        e = eccentricity
        
        M = 1
        E = sqrt( (p-2-2*e)*(p-2+2*e) / (p*(p-3-e^2)) )
        L = sqrt( (p^2 * M^2) / (p-3-e) )

        return [M, E, L]
    end

    function Schwarzschild_Geodesics(du, u, p, t)
        coord_time, r, θ, ϕ, p_t, p_r, p_θ, p_ϕ = u # state (Schwarzschild Coordinates)
        M, E, L = p # parameters (Mass, Energy, Angular Momentum)
        
        du[1] = dt = E*(1-2*M/r)^(-1)
        du[2] = dr = (1-2*M/r)*p_r
        du[3] = dθ = 0
        du[4] = dϕ = r^(-2)*L

        du[5] = dp_t = 0
        du[6] = dp_r = -(1/2)*( (1-2*M/r)^(-2)*(2*M/r^2)*(p_t)^2
                        + (2*M/(r^2))*(p_r)^2
                        - 2*(r^(-3))*(L)^2)
        du[7] = dp_θ = 0
        du[8] = dp_ϕ = 0
    end

    M, E, L = pe_2_EL(semirectum, ecc)
    R = semirectum*M/(1+ecc) # Radius of Orbit
    
    # Debug: Print the calculated values
    println("Debug info:")
    println("p = $semirectum, e = $ecc")
    println("M = $M, E = $E, L = $L")
    println("Initial radius R = $R")
    
    # Check energy condition for bound orbits
    if E >= 1.0
        println("Warning: E = $E >= 1, orbit may be unbound!")
    end
    
    BH_Kick = 0
    u0 = [0, R, pi/2, 0, -1*E, BH_Kick, 0, L]
    
    # Let's also verify the Hamiltonian constraint
    r0, p_r0, p_ϕ0 = R, BH_Kick, L
    H = -0.5 * ((1-2*M/r0)*p_r0^2 + r0^(-2)*p_ϕ0^2 + (1-2*M/r0)^(-1)*(-E)^2 - (1-2*M/r0))
    println("Hamiltonian H = $H (should be ≈ -0.5 for massive particle)")
    
    tspan = (0.0, 2000.0)
    p_actual = [M, E, L]

    prob = ODEProblem(Schwarzschild_Geodesics, u0, tspan, p_actual)
    
    # Try with different solver tolerances
    println("Attempting integration...")
    try
        true_sol = solve(prob, Tsit5(), abstol=1e-12, reltol=1e-12, saveat=0.1, maxiters=1e7)
        
        println("Integration completed to t = $(true_sol.t[end])")
        println("Solution has $(length(true_sol.t)) time points")
        
        # Check if we have enough points for waveform calculation
        if length(true_sol.t) < 1000
            println("Warning: Solution too short for reliable waveform!")
        end
        
        # Plot the orbital radius vs time to check for instabilities
        r_vals = [u[2] for u in true_sol.u]
        plot(true_sol.t, r_vals, label="r(t)", title="Orbital Radius vs Time")
        
        return true_sol
        
    catch e
        println("Integration failed with error: $e")
        
        # Try with a more robust solver
        println("Trying with Vern7 solver...")
        try
            true_sol = solve(prob, Vern7(), abstol=1e-12, reltol=1e-12, saveat=0.1, maxiters=1e7)
            println("Vern7 integration completed to t = $(true_sol.t[end])")
            return true_sol
        catch e2
            println("Vern7 also failed: $e2")
            
            # Try with shorter time span
            println("Trying shorter integration time...")
            prob_short = ODEProblem(Schwarzschild_Geodesics, u0, (0.0, 100.0), p_actual)
            true_sol = solve(prob_short, Tsit5(), abstol=1e-10, reltol=1e-10, saveat=0.1)
            println("Short integration completed to t = $(true_sol.t[end])")
            return true_sol
        end
    end
end

# Test the function
println("Testing with your original parameters [10, 0]...")
sol = create_Schwarzschild_trainingData([10, 0])