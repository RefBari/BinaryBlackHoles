using Plots
using DifferentialEquations
using LaTeXStrings
using Statistics
include("/Users/rbari/Downloads/common_denominator-2020_scimlforbbhs-e19e6808aad2/paper/zenodo/GWaveInversion/WaveformMan")

function pe_2_EL(semilatusRectum, eccentricity)
  p = semilatusRectum
  e = eccentricity
  
  M = 1
  E = sqrt( (p-2-2*e)*(p-2+2*e) / (p*(p-3-e^2)) )
  L = sqrt( (p^2 * M^2) / (p-3-e^2) )

  return [M, E, L]
end

function getParameters(solution, skipDataPoints = 0)
  solution_matrix = hcat([u for u in solution.u]...)

  skip_data = skipDataPoints

  # Remove first 100 columns 
  solution_matrix = solution_matrix[:, skip_data+1:end]

  # Remove last 100 columns  
  solution_matrix = solution_matrix[:, 1:(end-skip_data)]

  r_max = maximum(solution_matrix[2,:])
  r_min = minimum(solution_matrix[2,:])
  e_true = (r_max-r_min)/(r_max+r_min) # True Eccentricity
  p_true = (2*r_max*r_min)/(r_max+r_min) # True semi-latus rectum

  return p_true, e_true
end 

function create_Schwarzschild_trainingData(initial_conditions)
  semirectum = initial_conditions[1] # Semi-latus rectum
  ecc = initial_conditions[2] # Eccentricity

  function Schwarzschild_Geodesics(du, u, p, t)
      coord_time, r, θ, ϕ, p_t, p_r, p_θ, p_ϕ = u # state (Schwarzschild Coordinates)
      M, E, L = p # parameters (Mass, Energy, Angular Momentum)
      
      du[1] = dt = E*(1-2*M/r)^(-1)

      convertToCoordinateTime = ( du[1] )^(-1)

      du[2] = dr = ( (1-2*M/r)*p_r ) * convertToCoordinateTime
      du[3] = dθ = 0
      du[4] = dϕ = ( r^(-2)*L ) * convertToCoordinateTime

      du[5] = dp_t = 0
      du[6] = dp_r = ( -(1/2)*( (1-2*M/r)^(-2)*(2*M/r^2)*(p_t)^2
                      + (2*M/(r^2))*(p_r)^2
                      - 2*(r^(-3))*(L)^2) ) * convertToCoordinateTime
      du[7] = dp_θ = 0
      du[8] = dp_ϕ = 0
  end

  M, E, L = pe_2_EL(semirectum, ecc)
  R = semirectum*M/(1+ecc) # Radius of Orbit
  
  u0 = [0, R, pi/2, 0, -1*E, 0, 0, L]
  tspan = (0.0, 2000)
  timestep = 1
  t_full = 0:timestep:2000
  p_actual = [M, E, L]

  prob = ODEProblem(Schwarzschild_Geodesics, u0, tspan, p_actual)
  true_sol = solve(prob, Tsit5(), saveat = timestep)

  h_plus_full = compute_waveform(timestep, true_sol, 1.0; coorbital=true)[1]
  h_cross_full = compute_waveform(timestep, true_sol, 1.0; coorbital=true)[2]

  skip_initial_points = 0
  skip_end_points = 0

  h_plus_training = h_plus_full[(skip_initial_points+1):end-skip_end_points]
  h_cross_training = h_cross_full[(skip_initial_points+1):end-skip_end_points]
  t_truncated = t_full[(skip_initial_points+1):end-skip_end_points]

  p = plot(t_truncated, h_plus_training, label=L"GW using $\dot{r},\dot{\phi}$ (Schwarzschild Coordinates)", 
        linewidth = 2, alpha = 0.5, color = "green", xlabel = "t", ylabel = "h_+")
  display(p)
  return [prob, true_sol, h_plus_training, h_cross_training]
end

# create_Schwarzschild_trainingData([10, 0.2])
# getParameters(solution, 0)
